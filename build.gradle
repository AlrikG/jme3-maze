plugins {
    id 'java'
}

// select one source-code (JDK) option
//sourceCompatibility = '1.7'
sourceCompatibility = '1.8'

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) { // compile-time options:
        options.compilerArgs << '-Xdiags:verbose'
        options.compilerArgs << '-Xlint:unchecked'
        options.deprecation = true
        options.encoding = 'UTF-8'
    }
    tasks.withType(JavaExec) { // runtime options:
        args = []
        classpath sourceSets.main.runtimeClasspath
        //debug true
        //doFirst { println commandLine }
        enableAssertions true
        //jvmArgs '-verbose:gc'
        //jvmArgs '-Xms512m', '-Xmx512m'
        jvmArgs '-XX:+UseConcMarkSweepGC'
        //jvmArgs '-XX:+UseG1GC', '-XX:MaxGCPauseMillis=10'
    }
}

ext.jmonkeyengineVersion = '3.2.3-stable' // from jcenter

if (!hasProperty('mainClass')) {
    ext.mainClass = 'jme3maze.MazeGame'
}

repositories {
    //mavenLocal()
    maven { url 'https://dl.bintray.com/stephengold/jme3utilities' }
    maven { url 'https://dl.bintray.com/stephengold/org.jmonkeyengine' }
    maven { url 'https://dl.bintray.com/stephengold/tonegod' }
    jcenter()
}

dependencies {
    // from stephengold's bintray repositories:
    implementation 'jme3utilities:jme3-utilities-heart:2.28.1'
    implementation 'jme3utilities:jme3-utilities-ui:0.7.3'
    implementation 'jme3utilities:jme3-utilities-x:0.2.11'
    runtimeOnly 'org.jmonkeyengine:jme3-testdata:3.1.0-stable'
    implementation 'tonegod:tonegodgui:0.1.2'

    // from jcenter repositories:
    runtimeOnly "org.jmonkeyengine:jme3-blender:$jmonkeyengineVersion"
    runtimeOnly "org.jmonkeyengine:jme3-jogg:$jmonkeyengineVersion"
    runtimeOnly "org.jmonkeyengine:jme3-lwjgl:$jmonkeyengineVersion"
    runtimeOnly "org.jmonkeyengine:jme3-plugins:$jmonkeyengineVersion"
}

task runAssetProcessor(type: JavaExec) {
    main 'jme3maze.AssetProcessor'
}

// cleanup tasks
clean { dependsOn 'cleanDLLs', 'cleanLogs', 'cleanSOs', 'cleanWrittenAssets' }
task cleanDLLs(type: Delete) {
    delete fileTree(dir: '.', include: '*.dll')
}
task cleanLogs(type: Delete) {
    delete fileTree(dir: '.', include: 'hs_err_pid*.log')
}
task cleanSOs(type: Delete) {
    delete fileTree(dir: '.', include: '*.so')
}
task cleanWrittenAssets(type: Delete) {
    delete 'Written Assets'
}
