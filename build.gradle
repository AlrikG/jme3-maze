apply plugin: 'java'

//sourceCompatibility = '1.7'
sourceCompatibility = '1.8'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << '-Xlint:unchecked' << '-Xlint:deprecation'
    }
}

ext.jmonkeyengineVersion = '3.1.0-stable'
//ext.jmonkeyengineVersion = '[3.2,)'

if (!hasProperty('mainClass')) {
    ext.mainClass = 'jme3maze.MazeGame'
}
jar.manifest.attributes(
    'Main-Class': "${mainClass}"
)

repositories {
    maven { url 'https://dl.bintray.com/stephengold/jme3utilities' }
    maven { url 'https://dl.bintray.com/stephengold/org.jmonkeyengine' }
    maven { url 'https://dl.bintray.com/stephengold/tonegod' }
    maven { url 'https://jcenter.bintray.com' }
    //mavenLocal()
}

dependencies {
    // from jcenter repositories:
    compile "org.jmonkeyengine:jme3-core:${jmonkeyengineVersion}"
    compile "org.jmonkeyengine:jme3-blender:${jmonkeyengineVersion}"
    compile "org.jmonkeyengine:jme3-bullet:${jmonkeyengineVersion}"
    compile "org.jmonkeyengine:jme3-bullet-native:${jmonkeyengineVersion}"
    compile "org.jmonkeyengine:jme3-desktop:${jmonkeyengineVersion}"
    compile "org.jmonkeyengine:jme3-effects:${jmonkeyengineVersion}"
    compile "org.jmonkeyengine:jme3-jogg:${jmonkeyengineVersion}"
    compile "org.jmonkeyengine:jme3-lwjgl:${jmonkeyengineVersion}"
    compile "org.jmonkeyengine:jme3-plugins:${jmonkeyengineVersion}"
    compile "org.jmonkeyengine:jme3-terrain:${jmonkeyengineVersion}"

    // from stephengold's bintray repositories:
    compile 'tonegod:tonegodgui:0.1.0'
    compile 'jme3utilities:jme3-utilities-heart:0.9.26'
    compile 'jme3utilities:jme3-utilities-debug:0.7.6'
    compile 'jme3utilities:jme3-utilities-ui:0.5.9'
    compile 'jme3utilities:jme3-utilities-x:0.2.1'
    runtime 'org.jmonkeyengine:jme3-testdata:3.1.0-stable'
}

// cleanup tasks
clean { dependsOn 'cleanDLLs', 'cleanWrittenAssets' }
task cleanDLLs(type: Delete) {
    delete fileTree(dir: '.', include: '*.dll')
}
task cleanWrittenAssets(type: Delete) {
    delete 'Written Assets'
}

tasks.withType(JavaExec) {
    classpath sourceSets.main.runtimeClasspath
    enableAssertions true
}
task runAssetProcessor(type: JavaExec) {
    main 'jme3maze.AssetProcessor'
}